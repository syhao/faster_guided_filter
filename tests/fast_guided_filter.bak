// Author: Sudeep Pillai (spillai@csail.mit.edu)
// License: BSD
// Last modified: Sep 14, 2014

// Wrapper for most external modules
#include <boost/python.hpp>
#include <boost/python/suite/indexing/vector_indexing_suite.hpp>
#include <exception>

// Opencv includes
#include <opencv2/opencv.hpp>

// np_opencv_converter
#include "np_opencv_converter.hpp"
#include "fast_guided_filter.hpp"
using namespace std;

namespace py = boost::python;



// static cv::Mat boxfilter(const cv::Mat &I, int r)
// {
//     cv::Mat result;
//     cv::blur(I, result, cv::Size(r, r));
//     return result;
// }

static cv::Mat  cumsum(const cv::Mat &imSrc,int rc)  
{  
  int hei = imSrc.rows;
  int wid = imSrc.cols;
  cv::Mat imCum=imSrc.clone();
  if( rc == 1)
  {
    for( int i =1;i <hei; i++)
    {
      for( int j = 0; j<wid; j++)
      {
        imCum.at<double>(i,j) += imCum.at<double>(i-1,j);
      }
    }
  }

  if( rc == 2)
  {
    for( int i =0;i < hei; i++)
    {
      for( int j = 1; j< wid; j++)
      {
        imCum.at<double>(i,j) += imCum.at<double>(i,j-1);
      }
    }
  }
  return imCum;
}


static cv::Mat boxfilter(const cv::Mat &imSrc, int r)
{
  int hei = imSrc.rows;
  int wid = imSrc.cols;
  cv::Mat imDst = cv::Mat::zeros( hei, wid, CV_64FC1);
  //imCum = cumsum(imSrc, 1);
  cv::Mat imCum; 
  imCum= cumsum(imSrc,1);
  //imDst(1:r+1, :) = imCum(1+r:2*r+1, :);
  for( int i = 0; i<r+1; i++)
  {
    for( int j=0; j<wid; j++ )
    {
      imDst.at<double>(i,j) = imCum.at<double>(i+r,j);
    }
  }
  //imDst(r+2:hei-r, :) = imCum(2*r+2:hei, :) - imCum(1:hei-2*r-1, :);
  for( int i =r+1; i<hei-r;i++)
  {
    for( int j = 0; j<wid;j++)
    {
      imDst.at<double>(i,j) = imCum.at<double>(i+r,j)-imCum.at<double>(i-r-1,j);
    }
  }
  //imDst(hei-r+1:hei, :) = repmat(imCum(hei, :), [r, 1]) - imCum(hei-2*r:hei-r-1, :);
  for( int i = hei-r; i< hei; i++)
  {
    for( int j = 0; j< wid; j++)
    {
      imDst.at<double>(i,j) = imCum.at<double>(hei-1,j)-imCum.at<double>(i-r-1,j);
    }
  }
  imCum = cumsum(imDst, 2);
  //imDst(:, 1:r+1) = imCum(:, 1+r:2*r+1);
  for( int i = 0; i<hei; i++)
  {
    for( int j=0; j<r+1; j++ )
    {
      imDst.at<double>(i,j) = imCum.at<double>(i,j+r);
    }
  }
  //imDst(:, r+2:wid-r) = imCum(:, 2*r+2:wid) - imCum(:, 1:wid-2*r-1);
  for( int i =0 ; i<hei;i++)
  {
    for( int j = r+1; j<wid-r ;j++ )
    {
      imDst.at<double>(i,j) = imCum.at<double>(i,j+r)-imCum.at<double>(i,j-r-1);
    }
  }
  //imDst(:, wid-r+1:wid) = repmat(imCum(:, wid), [1, r]) - imCum(:, wid-2*r:wid-r-1);
  for( int i = 0; i< hei; i++)
  {
    for( int j = wid-r; j<wid; j++)
    {
      imDst.at<double>(i,j) = imCum.at<double>(i,wid-1)-imCum.at<double>(i,j-r-1);
    }
  }
  return imDst;

}

static cv::Mat convertTo(const cv::Mat &mat, int depth)
{
    if (mat.depth() == depth)
        return mat;

    cv::Mat result;
    mat.convertTo(result, depth);
    return result;
}

class FastGuidedFilterImpl
{
public:
    FastGuidedFilterImpl(int r, double eps,int s):r(r),eps(eps),s(s){}
    virtual ~FastGuidedFilterImpl() {}

    cv::Mat filter(const cv::Mat &p, int depth);

protected:
    int Idepth,r,s;
    double eps;

private:
    virtual cv::Mat filterSingleChannel(const cv::Mat &p) const = 0;
};

class FastGuidedFilterMono : public FastGuidedFilterImpl
{
public:
    FastGuidedFilterMono(const cv::Mat &I, int r, double eps,int s);

private:
    virtual cv::Mat filterSingleChannel(const cv::Mat &p) const;

private:

    cv::Mat I,origI, mean_I, var_I;
};

class FastGuidedFilterColor : public FastGuidedFilterImpl
{
public:
    FastGuidedFilterColor(const cv::Mat &I, int r, double eps,int s);

private:
    virtual cv::Mat filterSingleChannel(const cv::Mat &p) const;

private:
    std::vector<cv::Mat> origIchannels,Ichannels;
    cv::Mat mean_I_r, mean_I_g, mean_I_b;
    cv::Mat invrr, invrg, invrb, invgg, invgb, invbb;
};


cv::Mat FastGuidedFilterImpl::filter(const cv::Mat &p, int depth)
{
    cv::Mat p2 = convertTo(p, Idepth);
    cv::resize(p2 ,p2,cv::Size(p2.cols/s,p2.rows/s),0,0,CV_INTER_NN);
    cv::Mat result;
    if (p.channels() == 1)
    {
        result = filterSingleChannel(p2);
    }
    else
    {
        std::vector<cv::Mat> pc;
        cv::split(p2, pc);

        for (std::size_t i = 0; i < pc.size(); ++i)
            pc[i] = filterSingleChannel(pc[i]);

        cv::merge(pc, result);
    }

    return convertTo(result, depth == -1 ? p.depth() : depth);
}

FastGuidedFilterMono::FastGuidedFilterMono(const cv::Mat &origI, int r, double eps,int s):FastGuidedFilterImpl(r,eps,s)
{

    if (origI.depth() == CV_32F || origI.depth() == CV_64F)
        this->origI = origI.clone();
    else
        this->origI = convertTo(origI, CV_32F);
    cv::resize(this->origI ,I,cv::Size(this->origI.cols/s,this->origI.rows/s),0,0,CV_INTER_NN);
    Idepth = I.depth();

    mean_I = boxfilter(I, r);
    cv::Mat mean_II = boxfilter(I.mul(I), r);
    var_I = mean_II - mean_I.mul(mean_I);
}

cv::Mat FastGuidedFilterMono::filterSingleChannel(const cv::Mat &p) const
{

    cv::Mat mean_p = boxfilter(p, r);
    cv::Mat mean_Ip = boxfilter(I.mul(p), r);
    cv::Mat cov_Ip = mean_Ip - mean_I.mul(mean_p); // this is the covariance of (I, p) in each local patch.

    cv::Mat a = cov_Ip / (var_I + eps);
    cv::Mat b = mean_p - a.mul(mean_I);

    cv::Mat mean_a = boxfilter(a, r);
    cv::Mat mean_b = boxfilter(b, r);
    cv::resize(mean_a ,mean_a,cv::Size(origI.cols,origI.rows),0,0,CV_INTER_LINEAR);
    cv::resize(mean_b ,mean_b,cv::Size(origI.cols,origI.rows),0,0,CV_INTER_LINEAR);
    return mean_a.mul(origI) + mean_b;
}

FastGuidedFilterColor::FastGuidedFilterColor(const cv::Mat &origI, int r, double eps, int s):FastGuidedFilterImpl(r,eps,s)// : r(r), eps(eps)
{
    cv::Mat I;
    if (origI.depth() == CV_32F || origI.depth() == CV_64F)
        I = origI.clone();
    else
        I = convertTo(origI, CV_64F);
    cout<<(int)origI.at<cv::Vec3b>(258,200)[0]<<endl;

    Idepth = I.depth();
    cv::split(I, origIchannels);
    cv::resize(I,I,cv::Size(I.cols/s,I.rows/s),0,0,CV_INTER_NN);
    cv::split(I, Ichannels);
    cv::Mat m =Ichannels[0];
    cout<<(int)m.at<double>(258,200)<<endl;
    string name = "mat.jpg";
    cv::imwrite(name, m);
    mean_I_r = boxfilter(Ichannels[0], r);
    mean_I_g = boxfilter(Ichannels[1], r);
    mean_I_b = boxfilter(Ichannels[2], r);

    // variance of I in each local patch: the matrix Sigma.
    // Note the variance in each local patch is a 3x3 symmetric matrix:
    //           rr, rg, rb
    //   Sigma = rg, gg, gb
    //           rb, gb, bb
    cv::Mat var_I_rr = boxfilter(Ichannels[0].mul(Ichannels[0]), r) - mean_I_r.mul(mean_I_r) + eps;
    cv::Mat var_I_rg = boxfilter(Ichannels[0].mul(Ichannels[1]), r) - mean_I_r.mul(mean_I_g);
    cv::Mat var_I_rb = boxfilter(Ichannels[0].mul(Ichannels[2]), r) - mean_I_r.mul(mean_I_b);
    cv::Mat var_I_gg = boxfilter(Ichannels[1].mul(Ichannels[1]), r) - mean_I_g.mul(mean_I_g) + eps;
    cv::Mat var_I_gb = boxfilter(Ichannels[1].mul(Ichannels[2]), r) - mean_I_g.mul(mean_I_b);
    cv::Mat var_I_bb = boxfilter(Ichannels[2].mul(Ichannels[2]), r) - mean_I_b.mul(mean_I_b) + eps;

    // Inverse of Sigma + eps * I
    invrr = var_I_gg.mul(var_I_bb) - var_I_gb.mul(var_I_gb);
    invrg = var_I_gb.mul(var_I_rb) - var_I_rg.mul(var_I_bb);
    invrb = var_I_rg.mul(var_I_gb) - var_I_gg.mul(var_I_rb);
    invgg = var_I_rr.mul(var_I_bb) - var_I_rb.mul(var_I_rb);
    invgb = var_I_rb.mul(var_I_rg) - var_I_rr.mul(var_I_gb);
    invbb = var_I_rr.mul(var_I_gg) - var_I_rg.mul(var_I_rg);

    cv::Mat covDet = invrr.mul(var_I_rr) + invrg.mul(var_I_rg) + invrb.mul(var_I_rb);

    invrr /= covDet;
    invrg /= covDet;
    invrb /= covDet;
    invgg /= covDet;
    invgb /= covDet;
    invbb /= covDet;


}

cv::Mat FastGuidedFilterColor::filterSingleChannel(const cv::Mat &sp) const
{
   cv::Mat p;
    p = convertTo(sp, CV_64F);
    cv::Mat mean_p = boxfilter(p, r);

    cv::Mat mean_Ip_r = boxfilter(Ichannels[0].mul(p), r);
    cv::Mat mean_Ip_g = boxfilter(Ichannels[1].mul(p), r);
    cv::Mat mean_Ip_b = boxfilter(Ichannels[2].mul(p), r);

    // covariance of (I, p) in each local patch.
    cv::Mat cov_Ip_r = mean_Ip_r - mean_I_r.mul(mean_p);
    cv::Mat cov_Ip_g = mean_Ip_g - mean_I_g.mul(mean_p);
    cv::Mat cov_Ip_b = mean_Ip_b - mean_I_b.mul(mean_p);


    cv::Mat a_r = invrr.mul(cov_Ip_r) + invrg.mul(cov_Ip_g) + invrb.mul(cov_Ip_b);
    cv::Mat a_g = invrg.mul(cov_Ip_r) + invgg.mul(cov_Ip_g) + invgb.mul(cov_Ip_b);
    cv::Mat a_b = invrb.mul(cov_Ip_r) + invgb.mul(cov_Ip_g) + invbb.mul(cov_Ip_b);
       
    cv::Mat b = mean_p - a_r.mul(mean_I_r) - a_g.mul(mean_I_g) - a_b.mul(mean_I_b);
    cout<<a_r.type()<<endl;
    cv::Mat mean_a_r = boxfilter(a_r, r);
    cout<<mean_a_r.type()<<endl;
    cout<<CV_64F<<endl;
    cv::Mat mean_a_g = boxfilter(a_g, r);
    cv::Mat mean_a_b = boxfilter(a_b, r);
    cv::Mat mean_b =   boxfilter(b, r);

    // cv::resize(mean_a_r ,mean_a_r,cv::Size(origIchannels[0].cols,origIchannels[0].rows),0,0,CV_INTER_LINEAR);
    // cv::resize(mean_a_g ,mean_a_g,cv::Size(origIchannels[1].cols,origIchannels[1].rows),0,0,CV_INTER_LINEAR);
    // cv::resize(mean_a_b ,mean_a_b,cv::Size(origIchannels[2].cols,origIchannels[2].rows),0,0,CV_INTER_LINEAR);
    // cv::resize(mean_b,mean_b,cv::Size(origIchannels[2].cols,origIchannels[2].rows),0,0,CV_INTER_LINEAR);
    cv::resize(mean_a_r ,mean_a_r,cv::Size(origIchannels[0].cols,origIchannels[0].rows),0,0,CV_INTER_CUBIC);
    cv::resize(mean_a_g ,mean_a_g,cv::Size(origIchannels[1].cols,origIchannels[1].rows),0,0,CV_INTER_CUBIC);
    cv::resize(mean_a_b ,mean_a_b,cv::Size(origIchannels[2].cols,origIchannels[2].rows),0,0,CV_INTER_CUBIC);
    cv::resize(mean_b,mean_b,cv::Size(origIchannels[2].cols,origIchannels[2].rows),0,0,CV_INTER_CUBIC);
     cout<<"**********"<<endl;
     cout<<mean_a_r.type()<<endl;
     cout<<origIchannels[0].type()<<endl;

    return (mean_a_r.mul(origIchannels[0]) +mean_a_g.mul(origIchannels[1]) +mean_a_b.mul(origIchannels[2]) + mean_b);

}


FastGuidedFilter::FastGuidedFilter(const cv::Mat &I, int r, double eps,int s)
{
    CV_Assert(I.channels() == 1 || I.channels() == 3);

    if (I.channels() == 1)
        //impl_ = new FastGuidedFilterMono(I, 2 * (r/s) + 1, eps,s);
      impl_=new FastGuidedFilterMono(I,(r/s),eps,s);
    else
        //impl_ = new FastGuidedFilterColor(I, 2 * (r/s) + 1, eps,s);
      cout<<(int)I.at<cv::Vec3b>(258,200)[0]<<endl;
      impl_=new FastGuidedFilterColor(I,(r/s),eps,s);
}

FastGuidedFilter::~FastGuidedFilter()
{
    delete impl_;
}

cv::Mat FastGuidedFilter::filter(const cv::Mat &p, int depth) const
{
    return impl_->filter(p, depth);
}

cv::Mat fastGuidedFilter(const cv::Mat& I, const cv::Mat& p, int r, double eps, int s,int depth)
{
    return FastGuidedFilter(I, r, eps,s).filter(p, depth);
}

cv::Mat test_np_mat(const cv::Mat& in) {
  std::cerr << "in: " << in << std::endl;
  std::cerr << "sz: " << in.size() << std::endl;
  return in.clone();
}

cv::Mat test_with_args(const cv::Mat_<float>& in, const int& var1 = 1,
                       const double& var2 = 10.0, const std::string& name=std::string("test_name")) {
  std::cerr << "in: " << in << std::endl;
  std::cerr << "sz: " << in.size() << std::endl;
  std::cerr << "Returning transpose" << std::endl;
  return in.t();
}

class GenericWrapper {
 public: 
  GenericWrapper(const int& _var_int = 1, const float& _var_float = 1.f,
                 const double& _var_double = 1.d, const std::string& _var_string = std::string("test_string"))
      : var_int(_var_int), var_float(_var_float), var_double(_var_double), var_string(_var_string)
  {

  }

  cv::Mat process(const cv::Mat& in) {
    std::cerr << "in: " << in << std::endl;
    std::cerr << "sz: " << in.size() << std::endl;
    std::cerr << "Returning transpose" << std::endl;
    return in.t();
  }

 private:
  int var_int;
  float var_float;
  double var_double;
  std::string var_string;  
};

// Wrap a few functions and classes for testing purposes
namespace fs { namespace python {

BOOST_PYTHON_MODULE(fast_guided_filter)
{
  // Main types export
  fs::python::init_and_export_converters();
  py::scope scope = py::scope();

  // Basic test
  py::def("test_np_mat", &test_np_mat);
  py::def("fastGuidedFilter",&fastGuidedFilter);

  // With arguments
  py::def("test_with_args", &test_with_args,
          (py::arg("src"), py::arg("var1")=1, py::arg("var2")=10.0, py::arg("name")="test_name"));

  // Class
  py::class_<GenericWrapper>("GenericWrapper")
      .def(py::init<py::optional<int, float, double, std::string> >(
          (py::arg("var_int")=1, py::arg("var_float")=1.f, py::arg("var_double")=1.d,
           py::arg("var_string")=std::string("test"))))
      .def("process", &GenericWrapper::process)
      ;
}

} // namespace fs
} // namespace python



